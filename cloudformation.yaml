AWSTemplateFormatVersion: "2010-09-09"

Description: "Step Function for rotating Elasticsearch nodes"

Parameters:
  Stage:
    Type: String
    Description: Stage name.
  DeployS3Bucket:
    Type: String
    Description: Bucket which contains .zip file used by lambda functions e.g. deploy-tools-dist.
  DeployS3Key:
    Type: String
    Description: Key for .zip file used by lambda functions e.g. <stack>/<stage>/elasticsearch-node-rotation/elasticsearch-node-rotation.zip.
  DataNodeAsg:
    Type: String
    Description: The name of the auto-scaling group which contains the Elasticsearch data nodes (which may also be masters).
  DedicatedMasterAsg:
    Type: String
    Description: The name of the auto-scaling group which contains dedicated Elasticsearch master nodes. Leave this field empty if the Elasticsearch cluster does not have dedicated master nodes.
  DataNodeRotationCronExpression:
    Type: String
    Description: Cron expression which determines when data node rotations are scheduled.
  MasterNodeRotationCronExpression:
    Type: String
    Description: Cron expression which determines when master node rotations are scheduled. Only required if the Elasticsearch cluster has dedicated master nodes.
  SsmOutputBucketName:
    Type: String
    Description: Bucket used to store SSM command output. This bucket must already exist and the instances which receive SSM commands must have PutObject permissions for this bucket.
  SNSTopicForAlerts:
    Type: String
    Description: The name of the SNS topic used for alerting in the case of a failed rotation attempt.
  ClusterName:
    Type: String
    Description: The name of the elasticsearch cluster, for context in alerts.

Conditions:
  HasDedicatedMasters: !Not [!Equals [!Ref DedicatedMasterAsg, '']]

Resources:

  NodeRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-NodeRotation-${Stage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - lambda:InvokeFunction
                Resource: "*"
        - PolicyName: ElasticsearchAdminAsgPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - autoscaling:DescribeAutoScalingGroups
                - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                - autoscaling:DetachInstances
                - autoscaling:AttachInstances
                - autoscaling:TerminateInstanceInAutoScalingGroup
                Resource:
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${DataNodeAsg}
              - !If
                  - HasDedicatedMasters
                  -
                    Effect: Allow
                    Action:
                    - autoscaling:DetachInstances
                    - autoscaling:AttachInstances
                    - autoscaling:TerminateInstanceInAutoScalingGroup
                    Resource:
                    - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${DedicatedMasterAsg}
                  - !Ref AWS::NoValue
        - PolicyName: ElasticsearchAdminSsmPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - ssm:SendCommand
                - ssm:GetCommandInvocation
                Resource: "*"
        - PolicyName: SsmS3Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource:
                - !Sub arn:aws:s3:::${SsmOutputBucketName}
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                - !Sub arn:aws:s3:::${SsmOutputBucketName}/*
        - PolicyName: QueryStepFunctionHistory
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: states:ListExecutions
                Resource: "*"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: "*"

  TriggerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - states:StartExecution
                Resource: !Ref NodeRotationStepFunction

  ClusterStatusCheckLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-cluster-status-check-${Stage}
      Description: "Checks the status of an Elasticsearch cluster"
      Handler: "clusterStatusCheck.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  GetOldestNodeLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-get-oldest-node-${Stage}
      Description: "Finds the oldest node in an Elasticsearch cluster"
      Handler: "getOldestNode.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  AddNodeLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-add-node-${Stage}
      Description: "Disables re-balancing before adding a new node into the Elasticsearch cluster"
      Handler: "addNode.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  ClusterSizeCheckLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-cluster-size-check-${Stage}
      Description: "Confirms that the Elasticsearch cluster is the expected size"
      Handler: "clusterSizeCheck.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  ReattachOldInstanceLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
        !Sub enr-reattach-old-instance-${Stage}
      Description: "Reattaches old instance to the ASG"
      Handler: "reattachOldInstance.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  MigrateShardsLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-migrate-shards-${Stage}
      Description: "Migrates shards between two nodes"
      Handler: "migrateShards.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  ShardMigrationCheckLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-shard-migration-check-${Stage}
      Description: "Confirms that all shards have been migrated (and that cluster is green) or exits with an error"
      Handler: "shardMigrationCheck.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  RemoveNodeLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-remove-node-${Stage}
      Description: "Removes the oldest node in the cluster (and terminates the instance) before re-enabling re-balancing"
      Handler: "removeNode.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${DeployS3Bucket}
        S3Key: !Sub ${DeployS3Key}
      MemorySize: 512
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          SSM_BUCKET_NAME: !Ref SsmOutputBucketName

  NodeRotationStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn:
    - GetOldestNodeLambda
    - ClusterStatusCheckLambda
    - AddNodeLambda
    - ClusterSizeCheckLambda
    - ReattachOldInstanceLambda
    - MigrateShardsLambda
    - ShardMigrationCheckLambda
    - RemoveNodeLambda
    Properties:
      StateMachineName:
        !Sub Elasticsearch-Node-Rotation-${ClusterName}
      DefinitionString:
        !Sub
          - |
           {
             "Comment": "Elasticsearch Node Rotation",
             "StartAt": "GetOldestNode",
             "States": {
               "GetOldestNode": {
                 "Type": "Task",
                 "Resource": "${GetOldestNodeArn}",
                 "Next": "CheckClusterStatus"
               },
               "CheckClusterStatus": {
                 "Type": "Task",
                 "Resource": "${ClusterStatusCheckArn}",
                 "Next": "StatusIsGreen"
               },
               "StatusIsGreen": {
                 "Type": "Choice",
                 "Choices": [
                   {
                     "Not": {
                       "Variable": "$.clusterStatus",
                       "StringEquals": "green"
                     },
                     "Next": "FailState"
                   }
                 ],
                 "Default": "AddNode"
               },
               "FailState": {
                 "Type": "Fail",
                 "Cause": "Unhealthy Cluster!"
               },
               "AddNode": {
                 "Type": "Task",
                 "Resource": "${AddNodeArn}",
                 "Next": "ClusterSizeCheck"
               },
               "ClusterSizeCheck": {
                 "Type": "Task",
                 "Resource": "${ClusterSizeCheckArn}",
                 "Next": "ReattachOldInstance",
                 "Retry": [ {
                   "ErrorEquals": [ "States.ALL" ],
                   "IntervalSeconds": 30,
                   "MaxAttempts": 20,
                   "BackoffRate": 1.0
                  } ]
               },
               "ReattachOldInstance": {
                  "Type": "Task",
                  "Resource": "${ReattachOldInstanceArn}",
                  "Next": "MigrateShards"
                },
               "MigrateShards": {
                  "Type": "Task",
                  "Resource": "${MigrateShardsArn}",
                  "Next": "ShardMigrationCheck"
               },
               "ShardMigrationCheck": {
                  "Type": "Task",
                  "Resource": "${ShardMigrationCheckArn}",
                  "Next": "RemoveNode",
                  "Retry": [ {
                    "ErrorEquals": [ "States.ALL" ],
                    "IntervalSeconds": 120,
                    "MaxAttempts": 120,
                    "BackoffRate": 1.0
                   } ]
               },
               "RemoveNode": {
                 "Type": "Task",
                 "Resource": "${RemoveNodeArn}",
                 "End": true
              }
             }
           }
          -
            GetOldestNodeArn: !GetAtt GetOldestNodeLambda.Arn
            ClusterStatusCheckArn: !GetAtt ClusterStatusCheckLambda.Arn
            AddNodeArn: !GetAtt AddNodeLambda.Arn
            ClusterSizeCheckArn: !GetAtt ClusterSizeCheckLambda.Arn
            ReattachOldInstanceArn: !GetAtt ReattachOldInstanceLambda.Arn
            MigrateShardsArn: !GetAtt MigrateShardsLambda.Arn
            ShardMigrationCheckArn: !GetAtt ShardMigrationCheckLambda.Arn
            RemoveNodeArn: !GetAtt RemoveNodeLambda.Arn
      RoleArn: !GetAtt StatesExecutionRole.Arn

  DataNodeRotationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub data-node-rotation-schedule-${ClusterName}
      ScheduleExpression: !Ref DataNodeRotationCronExpression
      State: ENABLED
      Targets:
      - Arn: !Ref NodeRotationStepFunction
        RoleArn: !GetAtt TriggerExecutionRole.Arn
        Id: !GetAtt NodeRotationStepFunction.Name
        Input: !Sub
          - |
            {
              "asgName": "${DataNodeAsg}",
              "stepFunctionArn": "${StepFunctionArn}"
            }
          -
           StepFunctionArn: !Ref NodeRotationStepFunction
    DependsOn:
    - NodeRotationStepFunction
    - TriggerExecutionRole

  MasterNodeRotationSchedule:
    Condition: HasDedicatedMasters
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub master-node-rotation-schedule-${ClusterName}
      ScheduleExpression: !Ref MasterNodeRotationCronExpression
      State: ENABLED
      Targets:
      - Arn: !Ref NodeRotationStepFunction
        RoleArn: !GetAtt TriggerExecutionRole.Arn
        Id: !GetAtt NodeRotationStepFunction.Name
        Input: !Sub
          - |
            {
              "asgName": "${DedicatedMasterAsg}",
              "stepFunctionArn": "${StepFunctionArn}"
            }
          -
            StepFunctionArn: !Ref NodeRotationStepFunction
    DependsOn:
    - NodeRotationStepFunction
    - TriggerExecutionRole

  ExecutionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicForAlerts}
      AlarmName: !Sub Failed to complete node rotation for ${Stage} Elasticsearch Cluster
      AlarmDescription: !Sub
        - Elasticsearch Node Rotation failed - please see Step Function execution history for ${StepFunctionName}
        - { StepFunctionName: !GetAtt NodeRotationStepFunction.Name }
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref NodeRotationStepFunction
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum
    DependsOn: NodeRotationStepFunction
