AWSTemplateFormatVersion: "2010-09-09"

Description: "Step Function for rotating Elasticsearch nodes"

Parameters:
  S3Bucket:
    Type: String
    Description: Bucket which contains .zip file used by lambda functions e.g. deploy-tools-dist
  S3Key:
    Type: String
    Description: Key for .zip file used by lambda functions e.g. <stack>/<stage>/elasticsearch-node-rotation/elasticsearch-node-rotation.zip
  AutoScalingGroupName:
    Type: String
    Description: The name of the auto-scaling group which contains the Elasticsearch nodes

Resources:

  NodeRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub NodeRotation
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - lambda:InvokeFunction
                Resource: "*"
        - PolicyName: ElasticsearchAdminAsgPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - autoscaling:DescribeAutoScalingGroups
                - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                - autoscaling:SetDesiredCapacity
                - autoscaling:TerminateInstanceInAutoScalingGroup
                Resource: !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroupName}
        - PolicyName: ElasticsearchAdminSsmPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - ssm:SendCommand
                - ssm:GetCommandInvocation
                Resource: "*"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: "*"

  ElasticsearchClusterHealthCheckLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-elasticsearch-healthcheck
      Description: "Checks the health of an Elasticsearch cluster"
      Handler: "healthcheck.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${S3Bucket}
        S3Key: !Sub ${S3Key}
      MemorySize: 512
      Runtime: nodejs8.10
      Timeout: 300

  GetOldestInstanceLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: NodeRotationLambdaRole
    Properties:
      FunctionName:
          !Sub enr-get-oldest-lambda
      Description: "Finds the oldest node in an Elasticsearch cluster"
      Handler: "getOldestInstance.handler"
      Role: !GetAtt [ NodeRotationLambdaRole, Arn ]
      Code:
        S3Bucket: !Sub ${S3Bucket}
        S3Key: !Sub ${S3Key}
      MemorySize: 512
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          ASG_NAME: !Sub ${AutoScalingGroupName}

  NodeRotationStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: ElasticsearchClusterHealthCheckLambda
    Properties:
      DefinitionString:
        !Sub
          - |
           {
             "Comment": "Elasticsearch Node Rotation",
             "StartAt": "GetOldestInstance",
             "States": {
               "GetOldestInstance": {
                 "Type": "Task",
                 "Resource": "${GetOldestInstanceArn}",
                 "Next": "CheckClusterHealth"
               },
               "CheckClusterHealth": {
                 "Type": "Task",
                 "Resource": "${HealthcheckArn}",
                 "End": true
               }
             }
           }
          -
            HealthcheckArn: !GetAtt ElasticsearchClusterHealthCheckLambda.Arn
            GetOldestInstanceArn: !GetAtt GetOldestInstanceLambda.Arn
      RoleArn: !GetAtt StatesExecutionRole.Arn
